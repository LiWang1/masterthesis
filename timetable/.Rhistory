end_index <- i
}
}
}
}
if (!is.null(start_index)) {  # If there is a train
# Query 'origin --> start_station' and 'end_station --> destination'
df$hastrain <- 1
#Train
train_time_start <- leg$steps[[start_index]]$transit_details$departure_time$value
train_time_end <- leg$steps[[end_index]]$transit_details$arrival_time$value
df$Travel_Time_Waiting <- train_time_end - train_time_start - df$Travel_Time_Mode + 300 #5 minutes from first AV to train
origin_start <- data.driving(origin, start_station, departuretime)
end_destination <- data.driving(origin = end_station,destination =  destination, departuretime = departuretime)
#ab 3 Minuten AV, sonst laufen
#Im Kanton Z?rich Haltestelle durchschnittlich 195 Meter entfernt --> 300m zumutbar
if(origin_start$Total_Distance<=300){
origin_walk=T
origin_av = F
origin_start <- data.walking(origin, start_station, departuretime)
df$Travel_Time_Add_Walking <- df$Travel_Time_Add_Walking + origin_start[,which(namesModetable=="Total_Time_WT_Traffic")]
df$Distance_Add_Walking <- df$Distance_Add_Walking + origin_start[,which(namesModetable=="Distance_Add_Walking")]
}else{
origin_walk=F
origin_av = T
df$Travel_Time_Feeder <- df$Travel_Time_Feeder + origin_start$Total_Time_WT_Traffic
df$Distance_Feeder <- df$Distance_Feeder + origin_start$Total_Distance
}
if(end_destination$Total_Distance<=300){
dest_walk=T
dest_av = F
end_destination <- data.walking(origin, start_station, departuretime)
df$Travel_Time_Add_Walking <- df$Travel_Time_Add_Walking + end_destination[,which(namesModetable=="Total_Time_WT_Traffic")]
df$Distance_Add_Walking <- df$Distance_Add_Walking + end_destination[,which(namesModetable=="Distance_Add_Walking")]
}else{
dest_walk=F
dest_av = T
df$Travel_Time_Feeder <- df$Travel_Time_Feeder + end_destination$Total_Time_WT_Traffic
df$Distance_Feeder <- df$Distance_Feeder + end_destination$Total_Distance
}
# Calculate total time / waiting time
# Total_Time = 1. Time on train + 2. time in AV + 3. gap between actual and desired arrival time
#waiting_at_arrival <- (departuretime - time_end) - end_destination$Total_Time
df$Total_Time <- (train_time_end - train_time_start)
df$Total_Time <- df$Travel_Time_Mode + df$Travel_Time_Feeder + df$Travel_Time_Add_Walking + df$Travel_Time_Waiting
#+ waiting_at_arrival
df$Total_Time_WT_Traffic <- df$Total_Time
# n_Vehicles + 1 for each AV
if (origin_av) # Check if origin != start_station
df$n_Vehicles <- df$n_Vehicles + 1
if (dest_av)
df$n_Vehicles <- df$n_Vehicles + 1
# Sum up
df <- as.vector(unlist(df))
} else {
df$hastrain<-0
tempdf <- data.driving(origin, destination, departuretime) # AV the whole way
df$Total_Time <- tempdf$Total_Time
df$Total_Time_WT_Traffic <- tempdf$Total_Time_WT_Traffic
df$Travel_Time_Feeder <- tempdf$Total_Time_WT_Traffic
df$Distance_Feeder <- tempdf$Total_Distance
df$n_Vehicles <- 1 # n_Vehicles = 1
df <- as.vector(unlist(df))
}
df
}
# Main method
createModeTable <- function(trips, key){
modes <- c("driving","walking","bicycling","transit")
modetable <- as.data.frame(matrix(nrow = 1, ncol = length(namesModetable) + 3))
colnames(modetable) <- c("ID","Tripnr","Mode", namesModetable)
# iterate through all trips
for(i in 1:nrow(trips)){
departuretime <- floor(as.numeric(as.POSIXct(trips$DateTime[i])))
#print(paste0("ID ", trips$ID[i]))
#print(paste0("Tripnr ", trips$Tripnr[i]))
# Set trip parameters
if(is.na(trips$start_lat[i])|is.na(trips$end_lat[i]) ){
for (mode in modes){
#print(paste0("Mode ", mode))
switch (mode,
"walking" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, rep(NA,length(namesModetable)))),
"bicycling" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, rep(NA,length(namesModetable)))),
"driving" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, rep(NA,length(namesModetable)))),
"transit" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, rep(NA,length(namesModetable))))
#"av" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, rep(NA,length(namesModetable))))
)
}
}else{
origin = paste0(trips$start_lat[i],",",trips$start_lon[i])
destination = paste0(trips$end_lat[i],",",trips$end_lon[i])
# iterate through all modes
for (mode in modes){
#print(paste0("Mode ", mode))
switch (mode,
"walking" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, as.vector(unlist(data.walking(origin = origin,destination =  destination, departuretime = departuretime))))),
"bicycling" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, as.vector(unlist(data.bicycling(origin = origin, destination = destination,departuretime =  departuretime))))),
"driving" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, as.vector(unlist(data.driving(origin = origin,destination =  destination,departuretime =  departuretime))))),
"transit" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, data.transit(origin = origin,destination =  destination,departuretime =  departuretime)))
#"av" = modetable <- rbind(modetable, c(trips$ID[i],trips$Tripnr[i], mode, data.av(origin = origin,destination =  destination, departuretime = departuretime)))
)
}
}
}
modetable <- modetable[-1,]
return(modetable)
}
# ------------------------------------------------------------------------------------------------------
# ----- Testing ----------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------
# trips<-as.data.frame(matrix(NA,nrow=2,ncol=3))
# trips[,1]<-c(1,2)
#
# addresses<-c("Winterthurerstrasse 398, 8051 Zurich, Switzerland","Gloriastrasse 55, 8044 Zurich, Switzerland","Nueschelerstrasse 35, 8001 Zurich, Switzerland","Baerengasse 10, 8001 Zurich, Switzerland","Badenerstrasse 294, 8004 Zurich, Switzerland","Gloriastrasse 88, 8044 Zurich, Switzerland","Attenhoferstrasse 9, 8032 Zurich, Switzerland","Butzenstrasse 4, 8038 Zurich, Switzerland","Uetlibergstrasse 260, 8045 Zurich, Switzerland","Hotzestrasse 65, 8006 Zurich, Switzerland")
#
# locations <- ldply(addresses, function(x) geoCode(x))
# names(locations) <- c("lat","lon","location_type", "forAddress")
#
#
# combinations<-combn(x = addresses,m = 2)
# trips<-aperm(combinations,c(2,1))
#
# trips<-as.data.frame(cbind(as.numeric(1:nrow(trips)),trips))
#
# trips[,4]<- sample(c("Monday","Tuesday","Saturday","Workday"),nrow(trips),replace=T)
# trips[,5]<- sample(x=6:22,nrow(trips),replace = T) # Transit only works at operating hours -> limit to daytime
# trips[,6]<- sample(x=0:60,nrow(trips),replace = T)
# colnames(trips)<-c("Tripnr","Startaddress","Endaddress","DayOfWeek","Hour","Minute")
#
#
# trips<-addDates(trips)
# trips<-addGeoCodeAddresses(trips)
#
# modetable <- createModeTable(trips = trips[1:7,], key = key)
#
# modetable$Tripnr <- as.numeric(modetable$Tripnr)
# modetable <- modetable[order(modetable$Tripnr),]
# modetable <- rbind(modetable,modetable[1:4,])
# modetable$Tripnr[c(181:184)] <- 46
# modetable$Tripnr <- modetable$Tripnr%%2+1
# modetable$ID <- sort(rep(c(1:(nrow(modetable)/8)),8))
#
#
#
# # ----- For single queries ---------------------------------------------------------------
#origin <- geoCode("Himmeristrasse 10, Z??rich")
# origin <- paste0(origin[1], ",", origin[2])
#destination <- geoCode("Sulgenauweg 2, Bern")
#destination <- paste0(destination[1], ",", destination[2])
#
# mode = "transit"
#
#arrivaltime <- floor(as.numeric(as.POSIXct(Sys.time())))
# train <- F
#fill the triptables:
# triptable <- readxl::read_excel('/Users/wangli/polybox2/GoogleRouting/Input_beispiel.xlsx')
# sf_trips <- read.csv('/Users/wangli/polybox2/processed\ data/chain/sorted\ data/trip_coordinates/sfbays_alldays_move_withoutflight_coordinates0819.csv')
# week <- c('Tuesday', 'Wednesday', 'Thursday')
# index_week <- which(sf_trips$weekday %in% week)
# sf_trips_weekday <- sf_trips[index_week,]
# write.csv(sf_trips_weekday, 'sf_coordinates_weekdays.csv')
sf_trips_weekday = read.csv('/Users/wangli/Desktop/modetable/sf_coordinates_weekdays.csv')
sf_trips_weekday = sf_trips_weekday[, -1]
N = 500
triptable <- data.frame(ID = numeric(N), Tripnr = numeric(N), start_lat = numeric(N), start_lon = numeric(N),
end_lat = numeric(N), end_lon = numeric(N), DayOfWeek = character(N), Hour = numeric(N), Minute = numeric(N))
sampno_ID <-sf_trips_weekday$sampno*10 + sf_trips_weekday$perno
triptable$ID = sampno_ID[4501:5000]
triptable$Tripnr = sf_trips_weekday$tripno[4501:5000]
triptable$start_lat = sf_trips_weekday$ori_lat[4501:5000]
triptable$start_lon = sf_trips_weekday$ori_lon[4501:5000]
triptable$end_lat = sf_trips_weekday$des_lat[4501:5000]
triptable$end_lon = sf_trips_weekday$des_lon[4501:5000]
triptable$DayOfWeek = sf_trips_weekday$weekday[4501:5000]
triptable$Hour = as.numeric(format(as.POSIXct(sf_trips_weekday$departure_time,format="%H:%M:%S"),"%H"))[4501:5000]
triptable$Minute = as.numeric(format(as.POSIXct(sf_trips_weekday$departure_time,format="%H:%M:%S"),"%M"))[4501:5000]
a = 0
#wandelt DayOfWeek, Hour und Minute in DateTime mit n??chstem Datum entsprechend Wochentag um
triptable <- addDates(triptable)
for(i in 1:nrow(triptable)){
if(i==1){
modetable <- createModeTable(trips = triptable[i,], key = key)
}
else{
tryCatch(
{modetable <-rbind(modetable,createModeTable(trips = triptable[i,], key = key))},
error=function(e){
a=1
}
)
if(a==1){
tryCatch(
{modetable <-rbind(modetable,createModeTable(trips = triptable[i,], key = key))},
error=function(e){
a=1
}
)
}
a=0
}
}
# store modetable
write.csv(modetable, 'sf_weekdays4501_5000.csv', row.names = FALSE)
n = triptable$ID*10 + triptable$Tripnr
m_uni = unique(m)
n_uni = unique(n)
m = as.numeric(modetable$ID)*10 + as.numeric(modetable$Tripnr)
n = triptable$ID*10 + triptable$Tripnr
m_uni = unique(m)
n_uni = unique(n)
which(n_uni %in% m_uni)
n[370, ]
n[370]
View(modetable)
n_uni[370]
View(triptable)
sf_weekdays_5000 = sf_trips_weekday[1:5000, ]
View(sf_weekdays_5000)
index1 = which((sf_weekdays_5000$sampno == 1149354)&(sf_weekdays_5000$perno==3) & (sf_weekdays_5000$tripno == 1))
index1
sf_weekdays_5000[1632]
sf_weekdays_5000[1632,]
index1 = which((sf_weekdays_5000$sampno == 1149354)&(sf_weekdays_5000$perno==3) & (sf_weekdays_5000$tripno == 1))
index2 = which((sf_weekdays_5000$sampno == 1155019)&(sf_weekdays_5000$perno==1) & (sf_weekdays_5000$tripno == 4))
index3 = which((sf_weekdays_5000$sampno == 1172202)&(sf_weekdays_5000$perno==2) & (sf_weekdays_5000$tripno == 5))
index4 = which((sf_weekdays_5000$sampno == 1376809)&(sf_weekdays_5000$perno==5) & (sf_weekdays_5000$tripno == 9))
sf_weekdays_4996 = sf_weekdays_5000[-c(index1, index2, index3, index4),]
write.csv(sf_weekdays_4996, 'queried_trips.csv')
View(sf_weekdays_4996)
# trip
cal = read.csv("/Users/wangli/Downloads/caltrans_full_survey/afterhhmerge0814.csv", stringsAsFactors = FALSE)
View(cal)
# rename
names(cali_final)[names(cali_final)=="trip_distance_miles"] <- "trip_distance_km"
names(cali_final)[names(cali_final)=="air_dist"] <- "air_dist_km"
library(osmplotr)
library(osmdata)
library(sf)
# osm_plot
bb <- get_bbox(getbb("marin"))
#san francisco county:
bb[1,1] = -122.51485
bb[1, 2] = -122.35717
bb[2, 1] = 37.70853
bb[2, 2] = 37.81143
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='halmet', bbox = bb,return_type = 'point')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='town', bbox = bb,return_type = 'point')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city_block', bbox = bb,return_type = 'point')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city', bbox = bb,return_type = 'point')
View(data_halmet)
##extract
# residential office
data_office <- extract_osm_objects (key = 'office', bbox = bb)
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city', bbox = bb)
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city', bbox = bb, return_type = 'multipolygon')
View(data_halmet)
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city_block', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='borough', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='town', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='town', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='halmet', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='town', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='suburb', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='quarter', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='city_block', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='plot', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='farm', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='village', bbox = bb, return_type = 'multipolygon')
# residential office
data_halmet <-  extract_osm_objects (key = 'place', value='allotments', bbox = bb, return_type = 'multipolygon')
setwd("~/masterthesis")
setwd("~/masterthesis/timetable")
library(readxl)
library(timevis)
timeline_table <- read_excel("timeline_table.xlsx")
data <- data.frame(
id      = 1:nrow(timeline_table),
content = timeline_table$content,
start   = timeline_table$start,
end     = timeline_table$end
)
timevis(data,width = 1000, height = 200)
timevis(data,width = 1500, height = 200)
setwd("~/masterthesis/timetable")
library(readxl)
library(timevis)
timeline_table <- read_excel("timeline_table.xlsx")
data <- data.frame(
id      = 1:nrow(timeline_table),
content = timeline_table$content,
start   = timeline_table$start,
end     = timeline_table$end
)
timevis(data,width = 1500, height = 200)
plot(1,2)
plot(1,2, 'red')
plot(1,2, col='red')
plot(1,2, col='red', xlab = "complexity")
plot(1,2, col='red', xlab = "complexity", ylab = "#params")
plot(1,2, col='red', xlab = "complexity", ylab = "#paras")
plot(1,2, col='red', xlab = "complexity", ylab = "#paras", xaxt='n')
plot(1,2, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
plot(c(1,1,1,1,1,1,1),c(0.5,1,1.5,2,2.5,3,3.5) col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
x = c(1,1,1,1,1,1,1)
y = c(0.5,1,1.5,2,2.5,3,3.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
x = c(0.5,0.5,0.5,0.5,0.5,0.5,0.5)
y = c(0.5,1,1.5,2,2.5,3,3.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
point(1, 0.5)
points(1, 0.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
points(1, 0.5)
points(0.6, 0.5)
points(1, 0.5)
points(0.9, 0.5)
y = c(0.8,1,1.5,2,2.5,3,3.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n')
points(0.9, 0.5)
points(0.7, 0.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n', xlim=c(0, 1), ylim = c(0,1))
x = c(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25)
y = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7, 0.8, 0.9, 1)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n', xlim=c(0, 1), ylim = c(0,1))
x = c(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25)
y = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7, 0.8, 0.9, 1)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n', xlim=c(0, 1), ylim = c(0,1))
points(0.75, 0.1)
points(0.75, 0.1, col="blue")
points(0.75, 0.1, col = 'green')
points(0.75, 0.1, col="blue")
points(0.75, 0.2, col = 'green')
points(0.75, 0.5, col = 'black')
points(0.8, 0.5, col = 'black')
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n', xlim=c(0, 1), ylim = c(0,1))
points(0.75, 0.1, col="blue")
points(0.75, 0.2, col = 'green')
points(0.8, 0.5, col = 'black')
points(1, 1, col = 'yellow')
points(1, 1, col = 'grey')
legend(c('red', 'blue', 'green', "grey"), legend = ("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'))
legend(col= c('red', 'blue', 'green', "grey"), legend = ("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'))
legend(topleft, col= c('red', 'blue', 'green', "grey"), legend = ("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'))
legend(topleft, col= c('red', 'blue', 'green', "grey"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'))
legend("topleft", col= c('red', 'blue', 'green', "grey"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'))
legend("topleft", col= c('red', 'blue', 'green', "grey"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'), pch = 1)
legend("topleft", col= c('red', 'blue', 'green', "grey"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'),
pch = 1, cex = 0.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1))
points(0.75, 0.1, col="blue")
points(0.75, 0.2, col = 'green')
points(0.8, 0.5, col = 'black')
points(1, 1, col = 'grey')
legend("topleft", col= c('red', 'blue', 'green', "grey"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'),
pch = 1, cex = 0.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model", 'batch reaction', 'urine_nitrification', 'hydrological model'),
pch = 1, cex = 0.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 1, cex = 0.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 21, cex = 0.5)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =21)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 1.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 1)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 1)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 0.7)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 0.7)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.5)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 10)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend("topleft", col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.75, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.5, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.6), y = c(0.5, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.8), y = c(0.5, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.5, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0,0.5), y = c(0.5, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.7, 1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.5, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0,0.5), y = c(0.5, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0,0.5), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0,0.5), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(-0.1,0.5), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0.25,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0.25,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0.27,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0.28,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1.4)
legend(x = c(0.28,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1)
plot(x, y, col='red', xlab = "complexity", ylab = "#paras", xaxt='n', yaxt='n',
xlim=c(0, 1), ylim = c(0,1), pch =19)
points(0.75, 0.1, col="blue", pch = 19)
points(0.75, 0.2, col = 'green', pch = 19)
points(0.8, 0.5, col = 'black', pch = 19)
points(1, 1, col = 'grey', pch = 19)
legend(x = c(0.28,0.75), y = c(0.6, 1.1), col= c('red', 'blue', 'green', "black"), legend = c("linear model(model 1)", 'batch reaction(model 2)', 'urine_nitrification(model 3)', 'hydrological model(model 4)'),
pch = 19, cex = 0.8, pt.cex= 1)
